//featurevar FT_PRIODIC_PUSH;
//env int flowTableRowSize = 10; 
env	int SIZE_OF_FT = 10;
env	int MAX_TIMEOUT= 10;
env byte MAX_PORT_NUMBER = 3;
env byte DUMMY_HOST = 0;
env byte HOST1 = 1;
env byte HOST2 = 2;
env byte HOST3 = 3;
env byte HOST4 = 4;
env byte HOST5 = 5;
env byte HOST6 = 6;
env byte HOST7 = 7;
env byte HOST8 = 8;
env byte HOST9 = 9;
env byte HOST10 = 10;
env byte HOST11 = 11;
env byte HOST12 = 12;
env byte HOST13 = 13;
env byte HOST14 = 14;
env byte HOST15 = 15;
env byte HOST16 = 16;
env byte HOST17 = 17;
env byte DUMMY_SWITCH = 0;
env byte SWITCH1 = 1;
env byte SWITCH2 = 2;
env byte SWITCH3 = 3;
env byte SWITCH4 = 4;
env byte SWITCH5 = 5;
env byte SWITCH6 = 6;
env byte SWITCH7 = 7;
env byte SWITCH8 = 8;
env byte SWITCH9 = 9;
env byte SWITCH10 = 10;
env byte SWITCH11 = 11;
env byte SWITCH12 = 12;
env byte SWITCH13 = 13;
env byte SWITCH14 = 14;
env byte SWITCH15 = 15;
env byte SWITCH16 = 16;
env byte SWITCH17 = 17;
env byte PORT0 = 0;
env byte PORT1 = 1;
env byte PORT2 = 2;
env byte PORT3 = 3;
env byte FORWARD = 0;
env byte DROP = 1;
env byte TCP = 0;
env byte SSH = 1;
env byte NORMAL = 0;
env byte PRIORITY1 = 1;
env byte PRIORITY2 = 2;
env byte TIMEOUT1S = 1;
env byte TIMEOUT2S = 2;
env byte TIMEOUT3S = 3;
env byte one_sec = 1;
env byte two_sec = 2;
env byte three_sec = 3;
env byte four_sec = 4;

reactiveclass Controller(4) { 
	knownrebecs {
		Switch switch1;
		Switch switch2;
		Switch switch3;
		Switch switch4;
		Switch switch5;
		Switch switch6;
	}
	statevars {
		boolean RoutingError;
	}
	Controller() {
		//self.initRoutings();
		//self.changeRoutings() after(2);
     	RoutingError = false;
	}
	msgsrv initRoutings(){
		//switch.modifyState(byte packetSrcId , byte packetDestId, byte out_port, byte action, byte protocol)
		
		// path = f1_before
		//switch1.modifyState(HOST1, HOST5, PORT1, FORWARD , TCP , PRIORITY1, TIMEOUT3S) ;
	}
	
	msgsrv changeRoutings(){		

	}

	msgsrv newPacketInMessage(	byte switchId, byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol, byte Switchout_port){
		// This message is sent from a switch to the controller when the switch processes a packet for which it has no action rule to apply.  
		RoutingError = true;

	}
}

reactiveclass Switch(20) { 
	knownrebecs {
		Controller controller;
	} 
	statevars {
		byte SwId;
		Switch [3/*MAX_PORT_NUMBER*/] neighbor_switches;
		Host host_connected_to_this_switch;
		
		// Flow Table (FT) 
		//FT match Fields
		byte [10] FTDestIP;
		byte [10] FTSrcIP;
		byte [10] FTIngress_port;
		byte [10] FTProtocol;
		//FT Priority
		byte [10] FTPriority;
		//FT instructions
		byte [10] FTActionType;
		byte [10] FTOut_port;
		//FT Timeout
		int [10] FTTimeout;  
		
		//int SIZE_OF_FT;
		//int MAX_TIMOUT;				
		boolean illegalAccess;
		int selectedIf;
	}
	
	Switch(byte switchId, Host connectedHost , Switch sw_connected_to_port1, Switch sw_connected_to_port2 , Switch sw_connected_to_port3) {
	    SwId = switchId;
	    
	    if (SwId != DUMMY_SWITCH)
	    {
		    /*MAX_PORT_NUMBER*/
		    host_connected_to_this_switch = connectedHost;
		    neighbor_switches[0] = sw_connected_to_port1;
			neighbor_switches[1] = sw_connected_to_port2;
			neighbor_switches[2] = sw_connected_to_port3;
			
			
		    illegalAccess 		= false;
		    selectedIf = 0;
			
			initialing_FT();
			
			self.FT_timeout_checking() after(1);
		}
   	
	}
	

		/*Automatic Generated Code for FLOW_TABLE */
boolean initialing_FT()
	{
		FT_reset(); // reset Flow table array

		if (SwId == SWITCH1)
		{
			set_FT_entry( 0 , HOST4 , HOST3 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 1 , HOST3 , HOST2 , PORT1 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 2 , HOST16 , HOST10 , PORT1 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH2)
		{
			set_FT_entry( 0 , HOST4 , HOST3 , PORT1 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 1 , HOST3 , HOST2 , PORT0 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 2 , HOST2 , HOST8 , PORT2 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 3 , HOST16 , HOST10 , PORT2 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH3)
		{
			set_FT_entry( 0 , HOST4 , HOST3 , PORT0 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 1 , HOST3 , HOST2 , PORT2 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH4)
		{
			set_FT_entry( 0 , HOST4 , HOST3 , PORT1 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 1 , HOST4 , HOST12 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 2 , HOST2 , HOST8 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 3 , HOST16 , HOST10 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH5)
		{
			set_FT_entry( 0 , HOST6 , HOST13 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH6)
		{
			set_FT_entry( 0 , HOST6 , HOST13 , PORT1 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH7)
		{
			set_FT_entry( 0 , HOST4 , HOST12 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 1 , HOST2 , HOST8 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 2 , HOST7 , HOST8 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH8)
		{
			set_FT_entry( 0 , HOST4 , HOST12 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 1 , HOST2 , HOST8 , PORT0 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 2 , HOST7 , HOST8 , PORT0 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH9)
		{
		}
		else 
		if (SwId == SWITCH10)
		{
			set_FT_entry( 0 , HOST4 , HOST12 , PORT2 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 1 , HOST2 , HOST8 , PORT2 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 2 , HOST16 , HOST10 , PORT0 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH11)
		{
		}
		else 
		if (SwId == SWITCH12)
		{
			set_FT_entry( 0 , HOST4 , HOST12 , PORT0 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH13)
		{
			set_FT_entry( 0 , HOST6 , HOST13 , PORT0 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH14)
		{
			set_FT_entry( 0 , HOST4 , HOST3 , PORT2 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 1 , HOST3 , HOST2 , PORT1 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH15)
		{
			set_FT_entry( 0 , HOST15 , HOST16 , PORT3 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		else 
		if (SwId == SWITCH16)
		{
			set_FT_entry( 0 , HOST16 , HOST10 , PORT1 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
			set_FT_entry( 1 , HOST15 , HOST16 , PORT0 , FORWARD , TCP , PRIORITY1 , MAX_TIMEOUT );
		}
		
	}


	
	@priority(1)	
	msgsrv FT_timeout_checking()
	{
		if (SwId != DUMMY_SWITCH)
	    {
			int i; 
	     	for (i = 0; i < SIZE_OF_FT; i = i + 1) 
	     	{
	     		if (FTSrcIP[i] != 0 && FTTimeout[i] == 0 )
	     		{
	     			removeRuleFromFT(FTSrcIP[i] , FTDestIP[i] , FTOut_port[i] , FTProtocol[i] , FTActionType[i], FTPriority[i] , FTTimeout[i] );
	     		}
	     	}
	 		sortFlowTable();
	      	if (FTSrcIP[0] != 0 && FTTimeout[0] != 0 )
	     	{
	     		self.FT_timeout_checking() after(1);	
	     		
	     	}
	     	    	
	     	for (i = 0; i < SIZE_OF_FT; i = i + 1) 
	     	{
	     		if (FTTimeout[i] >= 0  )
	     		{
		    		FTTimeout[i]		= FTTimeout[i] -1 ;
	     		}
	
	     	}
	     	selectedIf = 0;
		}
     	
	}
	

	msgsrv swHandlePacket(	byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol, byte Switchout_port) 
	{ 
	    if (SwId != DUMMY_SWITCH)
	    {
		    boolean hasRuleInTable= false;
	
		    //lookup in flow table (table sorted by priority ) 
		    int i;
		    for (i = 0; i < MAX_TIMEOUT; i = i + 1) 
		    {
		    	//boolean isMatchOccorred = matchOccorred(i , packetSrcId , packetDestId,  packetProtocol);
		    	//if ( isMatchOccorred == true)
		    	if (FTDestIP[i] 	== packetDestId 
		    	&& FTSrcIP[i] 		== packetSrcId 
		    	&& FTProtocol[i] 	== packetProtocol && !hasRuleInTable )
		    	{
		    		hasRuleInTable = true;
		    		selectedIf = 0;
					if (FTActionType[i] == 0) //forward
					{
		    			
						if (FTOut_port[i] == 0) // rules related to host
						{
							selectedIf = 1;
							host_connected_to_this_switch.hostHandlePacket(	packetSrcId, packetDestId, packetData, packetProtocol, Switchout_port);
						}
						else if (FTOut_port[i] == 1) // rules related to sw_connected_to_port1
						{
	    					neighbor_switches[0].swHandlePacket( packetSrcId ,  packetDestId,  packetData,  packetProtocol,  Switchout_port);
	    					selectedIf = 2;
						}
						else if (FTOut_port[i] == 2) // rules related to sw_connected_to_port2
						{
	    					neighbor_switches[1].swHandlePacket( packetSrcId ,  packetDestId,  packetData,  packetProtocol,  Switchout_port);
	    					selectedIf = 3;
						}
						else if (FTOut_port[i] == 3) // rules related to sw_connected_to_port3
						{
	    					neighbor_switches[2].swHandlePacket( packetSrcId ,  packetDestId,  packetData,  packetProtocol,  Switchout_port);
	    					selectedIf = 4;
						}
					} 
					// else do nothing means drop packet 
				}
			}
			if (hasRuleInTable == false) // New packet recieved without match in F.T.(Flow Table)
			{
				controller.newPacketInMessage(	SwId, packetSrcId , packetDestId, packetData, packetProtocol, Switchout_port);
			}
		}
	}
	
	msgsrv newPacketOutMessage(	byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol, byte Switchout_port, byte action, byte priority , int timeout)
	{
	
		//This message is sent from the controller to a switch to notify 
		//that it must re-try applying an action rule to a buffered packet. 
		//The message includes the packet header.
		
		if (SwId != DUMMY_SWITCH)
	    {
			//insert new rule to flow table
			boolean ruleIsInserted;
			ruleIsInserted = insertRuleInFT(packetSrcId , packetDestId, Switchout_port, action, packetProtocol , priority, timeout);
		    sortFlowTable();
		    if (ruleIsInserted == true){
		    	self.swHandlePacket(packetSrcId, packetDestId, packetData , packetProtocol, Switchout_port) ;
		    }
		} 

		
	}

	msgsrv modifyState(byte packetSrcId , byte packetDestId, byte out_port, byte action, byte protocol, byte priority , int timeout)
	{
		if (SwId != DUMMY_SWITCH)
	    {
			insertRuleInFT( packetSrcId , packetDestId, out_port, action, protocol , priority , timeout);
			sortFlowTable();
		}
	}
	
	msgsrv removeState(byte packetSrcId , byte packetDestId, byte out_port, byte action, byte protocol, byte priority, int timeout)
	{
		if (SwId != DUMMY_SWITCH)
	    {
			removeRuleFromFT( packetSrcId , packetDestId, out_port, action, protocol , priority , timeout);
			sortFlowTable();
		}
	}

	
	boolean FT_reset()
	{
		int i; 
     	for (i = 0; i < SIZE_OF_FT; i = i + 1) 
     	{
			reset_FT_entry( i );
     	}
	}
	
	boolean reset_FT_entry(int i)
	{
		set_FT_entry( i , 0 , 0 ,0 ,0 ,0 , 0, MAX_TIMEOUT);
	}

	boolean set_FT_entry(int i , byte packetSrcId , byte packetDestId, byte out_port, byte action, byte protocol, byte priority , int timeout)
	{
		FTDestIP[i] 		= packetDestId;
		FTSrcIP[i] 			= packetSrcId;
		FTOut_port[i] 		= out_port;
		FTActionType[i] 	= action;
		FTProtocol[i] 		= protocol;
		FTPriority[i]		= priority;
		FTTimeout[i]		= timeout;
	}	
	
	
	// Manual swap function
	boolean swap(int a, int b) 
	{
	    int temp = a;
	    a = b;
	    b = temp;
	    return true;
	}

	// Function to sort the arrays based on FTPriority
	boolean sortFlowTable()
	{
	    for (int i = 0; i < SIZE_OF_FT - 1; i++) {
	        for (int j = 0; j < SIZE_OF_FT - i - 1; j++) {
	            if (FTPriority[j] > FTPriority[j + 1]) {
	                // Swapping elements in the priority array
	                swap(FTPriority[j], FTPriority[j + 1]);
	
	                // Swapping corresponding elements in all other arrays
	                swap(FTDestIP[j]	, FTDestIP[j + 1]);
	                swap(FTSrcIP[j]		, FTSrcIP[j + 1]);
	                swap(FTProtocol[j]	, FTProtocol[j + 1]);
	                swap(FTOut_port[j]	, FTOut_port[j + 1]);
	                swap(FTActionType[j], FTActionType[j + 1]);
	            }
	        }
	    }
	    return true;
	}
	
	
	boolean insertRuleInFT(byte packetSrcId , byte packetDestId, byte out_port, byte action, byte protocol, byte priority, int timeout)
	{
			//action 1 = drop & 0 = forward
			//new action rules to be inserted into the switch flow-table
			//insert new rule to flow table
			boolean ruleIsInserted;
			ruleIsInserted = false;
			int i;
			for (i = 0; i < SIZE_OF_FT; i = i + 1) {
	    		if (ruleIsInserted == false) {
	    			if (FTDestIP[i] == 0 || (FTSrcIP[i] == packetSrcId && FTDestIP[i] == packetDestId && FTProtocol[i] == protocol && FTPriority[i] == priority)) 
	    			{
	    				set_FT_entry( i ,  packetSrcId ,  packetDestId,  out_port,  action,  protocol,  priority, timeout);
	    				ruleIsInserted = true;
	    			}
	    		}
	    	}
	   		//sortFlowTable();
	   		return ruleIsInserted;
	}

	
	boolean removeRuleFromFT(byte packetSrcId , byte packetDestId, byte out_port, byte action, byte protocol, byte priority, int timeout)
	{
			//action 1 = drop & 0 = forward
			//new action rules to be inserted into the switch flow-table
			//insert new rule to flow table
			boolean ruleIsRemoved;
			ruleIsRemoved = false;
			int i;
			for (i = 0; i < SIZE_OF_FT; i = i + 1) {
	    		if (ruleIsRemoved == false) {
	    			if ((FTSrcIP[i] == packetSrcId && FTDestIP[i] == packetDestId && FTProtocol[i] == protocol && FTPriority[i] == priority )) 
	    			{
						reset_FT_entry(i);
	    				ruleIsRemoved = true;
	    			}
	    		}
	    	}
	   		//sortFlowTable();
	   		return ruleIsRemoved;
	}
	
	boolean matchOccorred( int i , byte packetSrcId , byte packetDestId, byte packetProtocol)
	{
		if (FTDestIP[i] 		== packetDestId 
	    	&& FTSrcIP[i] 		== packetSrcId 
	    	&& FTProtocol[i] 	== packetProtocol )
	    {
	    	return true;
	    }
	    else
	    { 
	    	return false;
	    }
	}
	
}
	
reactiveclass Host(8) { 
	knownrebecs {
		Switch knownSwitch;
 	}
	statevars { 
		byte id; 
		boolean illegalAccess;
		boolean liveness_error;
		byte 	knownSwitchout_port;  
		int[17 /* MAX_HOST_COUNT */] packet_counter;


	}
	Host(byte hostId , byte Switchout_portNumber) { 
		id = hostId;
		knownSwitchout_port 	= Switchout_portNumber; 
		illegalAccess 		= false;
		liveness_error 		= false;

		if (id != DUMMY_HOST  ) 
		{
			/*Automatic Generated Code for SENDING_PACKET */
			if (id == HOST4) {
				self.sendInPacket(HOST4, HOST3, 1, TCP) after(1);  // Path 1 representative packet
				self.sendInPacket(HOST4, HOST3, 2, TCP) after(2);  // Path 1 representative packet
				self.sendInPacket(HOST4, HOST3, 3, TCP) after(3);  // Path 1 representative packet
			}
			if (id == HOST4) {
				self.sendInPacket(HOST4, HOST12, 1, TCP) after(1);  // Path 2 representative packet
				self.sendInPacket(HOST4, HOST12, 2, TCP) after(2);  // Path 2 representative packet
				self.sendInPacket(HOST4, HOST12, 3, TCP) after(3);  // Path 2 representative packet
			}
			if (id == HOST3) {
				self.sendInPacket(HOST3, HOST2, 1, TCP) after(1);  // Path 3 representative packet
				self.sendInPacket(HOST3, HOST2, 2, TCP) after(2);  // Path 3 representative packet
				self.sendInPacket(HOST3, HOST2, 3, TCP) after(3);  // Path 3 representative packet
			}
			if (id == HOST2) {
				self.sendInPacket(HOST2, HOST8, 1, TCP) after(1);  // Path 4 representative packet
				self.sendInPacket(HOST2, HOST8, 2, TCP) after(2);  // Path 4 representative packet
				self.sendInPacket(HOST2, HOST8, 3, TCP) after(3);  // Path 4 representative packet
			}
			if (id == HOST16) {
				self.sendInPacket(HOST16, HOST10, 1, TCP) after(1);  // Path 5 representative packet
				self.sendInPacket(HOST16, HOST10, 2, TCP) after(2);  // Path 5 representative packet
				self.sendInPacket(HOST16, HOST10, 3, TCP) after(3);  // Path 5 representative packet
			}
			if (id == HOST7) {
				self.sendInPacket(HOST7, HOST8, 1, TCP) after(1);  // Path 6 representative packet
				self.sendInPacket(HOST7, HOST8, 2, TCP) after(2);  // Path 6 representative packet
				self.sendInPacket(HOST7, HOST8, 3, TCP) after(3);  // Path 6 representative packet
			}
			if (id == HOST6) {
				self.sendInPacket(HOST6, HOST13, 1, TCP) after(1);  // Path 7 representative packet
				self.sendInPacket(HOST6, HOST13, 2, TCP) after(2);  // Path 7 representative packet
				self.sendInPacket(HOST6, HOST13, 3, TCP) after(3);  // Path 7 representative packet
			}
			if (id == HOST15) {
				self.sendInPacket(HOST15, HOST16, 1, TCP) after(1);  // Path 8 representative packet
				self.sendInPacket(HOST15, HOST16, 2, TCP) after(2);  // Path 8 representative packet
				self.sendInPacket(HOST15, HOST16, 3, TCP) after(3);  // Path 8 representative packet
			}
		}
		
	} 
	


	msgsrv sendInPacket(byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol) {
		knownSwitch.swHandlePacket(	packetSrcId, packetDestId, packetData, packetProtocol , knownSwitchout_port) ; 
	}
	
	msgsrv hostHandlePacket(byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol, byte Switchout_port) {
		
		if (id != DUMMY_HOST  ) 
		{	
			/*Automatic Generated Code for CHECK_REACHAIBILITY */
if ( id == HOST1)
  {

        // host1 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST3  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST11  || packetDestId == HOST10  || packetDestId == HOST9  || packetDestId == HOST7  || packetDestId == HOST14  || packetDestId == HOST12  || packetDestId == HOST13 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST2)
  {
        // host2 can receive from
        if (packetSrcId == HOST3)
        {
            packet_counter[HOST3] = packet_counter[HOST3] + 1;
            if (packet_counter[HOST3] != packetData)
            {
                liveness_error = true;
            }
        }

        // host2 cannot receive from
        if ( packetDestId == HOST5  || packetDestId == HOST9  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST7  || packetDestId == HOST14  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST12  || packetDestId == HOST13  || packetDestId == HOST11  || packetDestId == HOST10 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST3)
  {
        // host3 can receive from
        if (packetSrcId == HOST4)
        {
            packet_counter[HOST4] = packet_counter[HOST4] + 1;
            if (packet_counter[HOST4] != packetData)
            {
                liveness_error = true;
            }
        }

        // host3 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST9  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST7  || packetDestId == HOST14  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST1  || packetDestId == HOST12  || packetDestId == HOST13  || packetDestId == HOST11  || packetDestId == HOST10 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST4)
  {

        // host4 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST3  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST1  || packetDestId == HOST11  || packetDestId == HOST10  || packetDestId == HOST9  || packetDestId == HOST7  || packetDestId == HOST14  || packetDestId == HOST12  || packetDestId == HOST13 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST5)
  {

        // host5 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST3  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST11  || packetDestId == HOST10  || packetDestId == HOST9  || packetDestId == HOST7  || packetDestId == HOST14  || packetDestId == HOST12  || packetDestId == HOST13 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST6)
  {

        // host6 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST3  || packetDestId == HOST8  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST11  || packetDestId == HOST10  || packetDestId == HOST9  || packetDestId == HOST7  || packetDestId == HOST14  || packetDestId == HOST12  || packetDestId == HOST13 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST7)
  {

        // host7 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST3  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST11  || packetDestId == HOST10  || packetDestId == HOST9  || packetDestId == HOST14  || packetDestId == HOST12  || packetDestId == HOST13 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST8)
  {
        // host8 can receive from
        if (packetSrcId == HOST2)
        {
            packet_counter[HOST2] = packet_counter[HOST2] + 1;
            if (packet_counter[HOST2] != packetData)
            {
                liveness_error = true;
            }
        }
        if (packetSrcId == HOST7)
        {
            packet_counter[HOST7] = packet_counter[HOST7] + 1;
            if (packet_counter[HOST7] != packetData)
            {
                liveness_error = true;
            }
        }

        // host8 cannot receive from
        if ( packetDestId == HOST9  || packetDestId == HOST5  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST14  || packetDestId == HOST3  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST12  || packetDestId == HOST13  || packetDestId == HOST11  || packetDestId == HOST10 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST9)
  {

        // host9 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST3  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST11  || packetDestId == HOST10  || packetDestId == HOST7  || packetDestId == HOST14  || packetDestId == HOST12  || packetDestId == HOST13 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST10)
  {
        // host10 can receive from
        if (packetSrcId == HOST16)
        {
            packet_counter[HOST16] = packet_counter[HOST16] + 1;
            if (packet_counter[HOST16] != packetData)
            {
                liveness_error = true;
            }
        }

        // host10 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST9  || packetDestId == HOST15  || packetDestId == HOST7  || packetDestId == HOST3  || packetDestId == HOST14  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST12  || packetDestId == HOST13  || packetDestId == HOST11 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST11)
  {

        // host11 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST3  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST10  || packetDestId == HOST9  || packetDestId == HOST7  || packetDestId == HOST14  || packetDestId == HOST12  || packetDestId == HOST13 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST12)
  {
        // host12 can receive from
        if (packetSrcId == HOST4)
        {
            packet_counter[HOST4] = packet_counter[HOST4] + 1;
            if (packet_counter[HOST4] != packetData)
            {
                liveness_error = true;
            }
        }

        // host12 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST9  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST7  || packetDestId == HOST3  || packetDestId == HOST14  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST1  || packetDestId == HOST13  || packetDestId == HOST11  || packetDestId == HOST10 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST13)
  {
        // host13 can receive from
        if (packetSrcId == HOST6)
        {
            packet_counter[HOST6] = packet_counter[HOST6] + 1;
            if (packet_counter[HOST6] != packetData)
            {
                liveness_error = true;
            }
        }

        // host13 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST9  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST7  || packetDestId == HOST3  || packetDestId == HOST14  || packetDestId == HOST8  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST12  || packetDestId == HOST11  || packetDestId == HOST10 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST14)
  {

        // host14 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST15  || packetDestId == HOST16  || packetDestId == HOST3  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST11  || packetDestId == HOST10  || packetDestId == HOST9  || packetDestId == HOST7  || packetDestId == HOST12  || packetDestId == HOST13 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST15)
  {

        // host15 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST16  || packetDestId == HOST3  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST11  || packetDestId == HOST10  || packetDestId == HOST9  || packetDestId == HOST7  || packetDestId == HOST14  || packetDestId == HOST12  || packetDestId == HOST13 )
        {
            illegalAccess = true;
        }
  }

if ( id == HOST16)
  {
        // host16 can receive from
        if (packetSrcId == HOST15)
        {
            packet_counter[HOST15] = packet_counter[HOST15] + 1;
            if (packet_counter[HOST15] != packetData)
            {
                liveness_error = true;
            }
        }

        // host16 cannot receive from
        if ( packetDestId == HOST2  || packetDestId == HOST5  || packetDestId == HOST9  || packetDestId == HOST7  || packetDestId == HOST3  || packetDestId == HOST14  || packetDestId == HOST8  || packetDestId == HOST6  || packetDestId == HOST4  || packetDestId == HOST1  || packetDestId == HOST12  || packetDestId == HOST13  || packetDestId == HOST11  || packetDestId == HOST10 )
        {
            illegalAccess = true;
        }
  }

		
		if (packetData == 1) //for avoid deadlock error and  check all states
				self.done() after(10/*MAX_TIMEOUT*/);
		}
	}
	
	msgsrv done() {
		//if ( (packet_counter[0] != 1) && (packet_counter[1] != 1) )
			liveness_error = true;
	
		self.done() after(1/*MAX_TIMEOUT*/);
	}
}

main { 
	
	Controller controller(switch1 , switch2 , switch3 , dummy_switch ,dummy_switch ,dummy_switch ):(); 
   	
   	//Switch has 4 port ={0,1,2,3} 
   	//All hosts connected to port 0 of switches with same id number for example host1 connected to port 0 of switch1
   	//parameters ordered : switchId , connected_host , switch_connected_to_port1 , switch_connected_to_port2 , switch_connected_to_port3
 	
 	
	Switch dummy_switch(controller):(0, dummy_host, dummy_switch, dummy_switch ,dummy_switch);
	
	/*Automatic Generated Code for SWITCH_TOPOLOGY */
	Switch switch1 (controller):(1, host1, switch2, switch16, switch14);
	Switch switch2 (controller):(2, host2, switch1, switch4, dummy_switch);
	Switch switch3 (controller):(3, host3, switch12, switch14, switch13);
	Switch switch4 (controller):(4, host4, switch2, switch9, switch10);
	Switch switch5 (controller):(5, host5, switch6, switch16, switch13);
	Switch switch6 (controller):(6, host6, switch5, switch7, switch11);
	Switch switch7 (controller):(7, host7, switch6, switch10, switch8);
	Switch switch8 (controller):(8, host8, switch7, switch15, switch12);
	Switch switch9 (controller):(9, host9, switch4, switch11, switch10);
	Switch switch10 (controller):(10, host10, switch4, switch7, switch9);
	Switch switch11 (controller):(11, host11, switch6, switch9, switch15);
	Switch switch12 (controller):(12, host12, switch3, switch8, switch13);
	Switch switch13 (controller):(13, host13, switch3, switch5, switch12);
	Switch switch14 (controller):(14, host14, switch1, switch3, dummy_switch);
	Switch switch15 (controller):(15, host15, switch8, switch11, switch16);
	Switch switch16 (controller):(16, host16, switch1, switch5, switch15);
	

 	Host dummy_host(dummy_switch):(0,0);
	/*Automatic Generated Code for HOST_TOPOLOGY */
	Host host1(switch1):(1,0);
	Host host2(switch2):(2,0);
	Host host3(switch3):(3,0);
	Host host4(switch4):(4,0);
	Host host5(switch5):(5,0);
	Host host6(switch6):(6,0);
	Host host7(switch7):(7,0);
	Host host8(switch8):(8,0);
	Host host9(switch9):(9,0);
	Host host10(switch10):(10,0);
	Host host11(switch11):(11,0);
	Host host12(switch12):(12,0);
	Host host13(switch13):(13,0);
	Host host14(switch14):(14,0);
	Host host15(switch15):(15,0);
	Host host16(switch16):(16,0);

}