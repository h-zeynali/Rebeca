property { 
	define {
	
		controller_RoutingError = controller.RoutingError;

		client1_illegalAccess = host1.illegalAccess;
		client2_illegalAccess = host2.illegalAccess;
		client3_illegalAccess = host3.illegalAccess;
 		client4_illegalAccess = host4.illegalAccess;
 		client5_illegalAccess = host5.illegalAccess;
 		client6_illegalAccess = host6.illegalAccess;

		client1_liveness_error = host1.liveness_error;
		client2_liveness_error = host2.liveness_error;
		client3_liveness_error = host3.liveness_error;
 		client4_liveness_error = host4.liveness_error;
 		client5_liveness_error = host5.liveness_error;
 		client6_liveness_error = host6.liveness_error;


	}
	
	Assertion{

		safety_controller_assertion4test: !(controller_RoutingError);
		
		safety_client1_illegalAccess: !(client1_illegalAccess);
		safety_client2_illegalAccess: !(client2_illegalAccess);
		safety_client3_illegalAccess: !(client3_illegalAccess);
 		safety_client4_illegalAccess: !(client4_illegalAccess);
 		safety_client5_illegalAccess: !(client5_illegalAccess);
 		safety_client6_illegalAccess: !(client6_illegalAccess);

		safety_client1_liveness_error: !(client1_liveness_error);
		safety_client2_liveness_error: !(client2_liveness_error);
		safety_client3_liveness_error: !(client3_liveness_error);
 		safety_client4_liveness_error: !(client4_liveness_error);
 		safety_client5_liveness_error: !(client5_liveness_error);
 		safety_client6_liveness_error: !(client6_liveness_error);

	}
	
}