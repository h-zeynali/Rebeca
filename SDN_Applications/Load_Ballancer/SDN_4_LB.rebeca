//Write your code here !
env int flowTableRowSize = 10; 
 
reactiveclass Controller(10) { 
	knownrebecs {
		Switch s1;
		Switch s2;
		Switch s3;
	}
   
	statevars {  	
    	byte roundRobinRoundNumber; 
	} 
	
	Controller() {
		roundRobinRoundNumber = 1;
	}
   
	msgsrv handleMessage(byte SwitchId, byte PortId, byte PacketId, byte PacketHeader){
	
	}
	
	msgsrv newPacketInMessage(byte switchId, byte header){
		// This message is sent from a switch to the controller when the switch processes a packet
		// for which it has no action rule to apply.  
		// The packet is buffered in the switch until a message of type Packet-out is received.
		
		//for simplification of routing algorithm I did it manually for now
		//load balancer for header IP = 10
		if (header == 10) {
			//roundRobinLoadBalance();
		    if (roundRobinRoundNumber == 1) {
		    	//R1 is chosen
				if (switchId == 1) {
			    	//so send message to s1 to set flow table port 1 for header IP = 10
			    	s1.newPacketOutMessage(header, 1, 1);
			    	//and send message to s2 to set port 0 for header IP = 10
					s2.modifyState(header, 0, 1);
					s3.modifyState(header, 1, 1);						 			
				} else if (switchId == 2) {
				 	s1.modifyState(header, 1, 1);
					s2.newPacketOutMessage(header, 0, 1);
					s3.modifyState(header, 1, 1);
				} else { // switchId == 3 
					s1.modifyState(header, 1, 1);
					s2.modifyState(header, 0, 1);
					s3.newPacketOutMessage(header, 1, 1);				 
				}
				roundRobinRoundNumber = 2;  
			} else {
				//R2 is chosen
				if (switchId == 1) {
			    	//so send message to s1 to set flow table port 1 for header IP = 10
			    	s1.newPacketOutMessage(header, 2, 1);
			    	//and send message to s2 to set port 0 for header IP = 10
			    	s2.modifyState(header, 1, 1);
					s3.modifyState(header, 0, 1);	
				} else if (switchId == 2) { 
					s1.modifyState(header, 2, 1);
					s2.newPacketOutMessage(header, 1, 1);
					s3.modifyState(header, 0, 1);	
				} else { // switchId == 3 
					s1.modifyState(header, 2, 1);
					s2.modifyState(header, 1, 1);
					s3.newPacketOutMessage(header, 0, 1);				 
				} 
				roundRobinRoundNumber = 1; 
			}
		}

	}
	
	
	msgsrv roundRobinLoadBalancer() { 
		if(roundRobinRoundNumber == 0) {
			roundRobinRoundNumber = 1;
		} else {
			roundRobinRoundNumber = 0;
		}
	}
}

reactiveclass Switch(10) { 
	knownrebecs {
		Controller controller; 
	} 
   
	statevars {
		byte id;
		byte [10] flowTableHeaderDest;
		byte [10] flowTableOutPort;
		Switch [2] switches;
		Host host;
		byte bufferedPackete; 
		byte packetRepeatCount;
		boolean packetRepeatedTwice;
		boolean IsWaitedForController;
	} 
   
	Switch(byte switchId, Host connectedHost, Switch s1, Switch s2) { 
	    id = switchId;
		switches[0] = s1;
		switches[1] = s2;
		host = connectedHost;
		int i; 
     	for (i = 0; i < 10; i = i + 1) {
     		flowTableHeaderDest[i] = 0;
     		flowTableOutPort[i] = 0;
     	}
     	packetRepeatCount = 0;
     	packetRepeatedTwice = false;
     	IsWaitedForController = false;
		//self.requestTableFromController() after(500);
		//self.intractAgentWithController() after(2000); 
	}
	
	msgsrv swHandlePacket(byte header, byte packet) { 
	    int i;
	    boolean hasRuleInTable;
	    hasRuleInTable = false;
	    

	    //lookup in flow table 
	    if ( header!= 0) {
		    for (i = 0; i < 10; i = i + 1) {
		    	if (flowTableHeaderDest[i] == header) {
		    		hasRuleInTable = true;
		    		if (flowTableOutPort[i] == 0) { 
						host.hostHandlePacket(packet); 
					} else if (flowTableOutPort[i] == 1){ 
						switches[0].swHandlePacket(header, packet);
					} else if (flowTableOutPort[i] == 2){
						switches[1].swHandlePacket(header, packet);				
					}
				}
			}
		}
		if (hasRuleInTable == false){
			controller.newPacketInMessage(id, header);
			//wait for controller response
			bufferedPackete = packet;
			IsWaitedForController = true;
		}
		else
		{
			//check if packet repeated 
	    	if (packet == 1){
	    		packetRepeatCount++;
	    		if (packetRepeatCount >=2 ){
	    			packetRepeatedTwice = true;
	    		}
	    	}
		} 
	}
		
	msgsrv newPacketOutMessage(byte header, byte port, byte action){
	
		//This message is sent from the controller to a switch to notify 
		//that it must re-try applying an action rule to a buffered packet. 
		//The message includes the packet header.
		
		// packet out in controller
		//This message is sent from a switch to the controller when the switch processes a packet for which it has no action rule to apply. 
		//The message includes the switch identifier and the identifier and header of the packet. 
		//The packet is buffered in the switch until a message of type Packet-out is received.
		
		//insert new rule to flow table
		boolean ruleIsInserted;
		ruleIsInserted = false;
		int i;
		for (i = 0; i < 10; i = i + 1) {
	    	if (ruleIsInserted == false) {
	    		if (flowTableHeaderDest[i] == 0) {
	    			flowTableHeaderDest[i] = header;
	    			flowTableOutPort[i] = port;
	    			//flowTableActionType = action;
	    			ruleIsInserted = true;
	    		}
	    	}
	    }
	    
	    if (ruleIsInserted == true){
	    	self.swHandlePacket(header, bufferedPackete );
	    	//bufferedPackete = 0;
	    } 
	    else 
	    {
	    	//ERROR
	    	
	    }
		
	}
	
	msgsrv sendOut(byte packetId){
	
	}
	
	msgsrv modifyState(byte headerID, byte port, byte action){
		//new action rules to be inserted into the switchâ€™s flow-table
		//insert new rule to flow table
		boolean ruleIsInserted;
		ruleIsInserted = false;
		int i;
		for (i = 0; i < 10; i = i + 1) {
	    	if (ruleIsInserted == false) {
	    		if (flowTableHeaderDest[i] == 0 || flowTableHeaderDest[i] == headerID) {
	    			flowTableHeaderDest[i] = headerID;
	    			flowTableOutPort[i] = port;
	    			//flowTableActionType = action;
	    			ruleIsInserted = true;
	    		}
	    	}
	    }
	}


   

}
 
reactiveclass Host(10) { 
	knownrebecs {
		Switch knownSwitch; 
 	} 
   
	statevars { 
		byte id; 
		byte receivedData;
		boolean packetReceivedTwice; 
	} 
   
	Host(byte hostId) { 
		id = hostId; 
		if (id == 1) { 
			// sample package will be send from h0 
			// to destination host indicated by header IP = 10 with two load balancer R1 and R2
			self.sendInPacket(10, 1) after(1); //after(?(10, 20, 30));
		//        delay(?(0, 1));
        //admin.rescueReach() after(netDelay) deadline(rescueDeadline - netDelay);
 
		} 
		packetReceivedTwice = false;
	}
	   
	msgsrv sendInPacket(byte header, byte packet) { 
		knownSwitch.swHandlePacket(header, packet); 
	}
	
	msgsrv hostHandlePacket(byte packet) {
		receivedData = packet;
		if (id != 0 ) {//packet received in replica
			if (receivedData == 1){
				//self.sendInPacket(20,26) after (1500); 
				//packetReceivedTwice = true;
				self.done();
			}else{//Error
				packetReceivedTwice = true;
			}
		}
	}
	
	msgsrv done() {
		self.done() after(1);
	}
	
}


main { 
	
	Controller controller(s1, s2, s3):(); 
   	
   	//each switch has 3 port ={0,1,2} , related hosts connected to port 0
   	//parameters ordered = id , port0 connected host, port 1 connected switch, port 2 connected switch
	Switch s1(controller):(1, h0, s2, s3); 
	Switch s2(controller):(2, R1, s1, s3); 
	Switch s3(controller):(3, R2, s1, s2); 
	Host h0(s1):(1);
	Host R1(s2):(2);
	Host R2(s3):(3);
   
	// Topology: 
	//       _______(C)_______ 
	//      /        |        \ 
	//     /2________/\_______1\ 
	//    //         |         \\ 
	//  (S1)_1____1_(S2) 		(S3) 
	//   |           |           | 
	//   0           0           0 
	//   |           |           | 
	//  (H0)        (R1)        (R2)  
} 
