reactiveclass Controller(4) { 
	knownrebecs {
		Switch s1;
		Switch s2;
		Switch s3;
	}
	statevars {
		boolean RoutingError;
	}
	Controller() {
		self.initRoutings();
		self.changeRoutingsF1() after(2);
		self.changeRoutingsF2() after(2);
	}
	msgsrv initRoutings(){ 	//action: 1 for drop 0 for forward 		//protocol: 1 for SSH 0 for Normal
		//msgsrv modifyState(byte packetSrcId , byte packetDestId, byte port, byte action, byte protocol)
		
		// path = f1_before
		s1.modifyState(1, 5, 1, 0, 0) ;
		s2.modifyState(1, 5, 1, 0, 0) ;
		s3.modifyState(1, 5, 0, 0, 0) ;
	}
	msgsrv changeRoutings(){		// path = f1_after
		s1.modifyState(1, 5, 2, 0, 0);
		s2.modifyState(1, 5, 2, 0, 0);
		s3.modifyState(1, 5, 0, 0, 0);
	}

	msgsrv newPacketInMessage(	byte switchId, byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol, byte SwitchPort){
		// This message is sent from a switch to the controller when the switch processes a packet
		// for which it has no action rule to apply.  

		if (switchId == 1 )// if unknown packet arrive from s1
		{
			//forward packet by action = 0 
			//s1.newPacketOutMessage(packetSrcId, packetDestId, packetData ,packetProtocol,SwitchPort, 0 );
			RoutingError = true;
		}
		else if (switchId == 2) // if packet arrive from s2 
		{
			//action = 1 means drop the packet
			//s2.newPacketOutMessage(packetSrcId, packetDestId, packetData ,packetProtocol,SwitchPort, 1 );
			RoutingError = true;
		}
		else if (switchId == 3) // if packet arrive from s3 
		{
			//action = 1 means drop the packet
			//s3.newPacketOutMessage(packetSrcId, packetDestId, packetData ,packetProtocol,SwitchPort, 1 );
			RoutingError = true;
		}
		else if (switchId == 4) // if packet arrive from s3 
		{
			//action = 1 means drop the packet
			//s3.newPacketOutMessage(packetSrcId, packetDestId, packetData ,packetProtocol,SwitchPort, 1 );
			RoutingError = true;
		}
		else if (switchId == 5) // if packet arrive from s3 
		{
			//action = 1 means drop the packet
			//s3.newPacketOutMessage(packetSrcId, packetDestId, packetData ,packetProtocol,SwitchPort, 1 );
			RoutingError = true;
		}
	}
}
reactiveclass Switch(4) { 
	knownrebecs {
		Controller controller;
	} 
	statevars {
		byte SwId;
		int [3/*portCount*/] packetCountInEachPortInEachTime;
		Switch [2] neighbor_switches;
		Host host_connected_to_this_switch;
		
		byte [10] flowTableHeaderDestIP;
		byte [10] flowTableHeaderSrcIP;
		byte [10] flowTableHeaderProtocol;
		byte [10] flowTableOutPort;
		byte [10] flowTableActionType;
		byte [10] flowTablePrioriry; 
	}
	Switch(byte switchId, Host connectedHost , Switch neighbor_switches1, Switch neighbor_switches2) {
	    SwId = switchId;
	    neighbor_switches[0] = neighbor_switches1;
		neighbor_switches[1] = neighbor_switches2;
		host_connected_to_this_switch = connectedHost;
		FT_reset(); // reset Flow table array
	}
	msgsrv swHandlePacket(	byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol, byte SwitchPort) {
	    boolean hasRuleInTable= false;

	    //lookup in flow table 
	    int i;
	    for (i = 0; i < 10; i = i + 1) 
	    {
	    	if (flowTableHeaderDestIP[i] 	== packetDestId 
	    	&& flowTableHeaderSrcIP[i] 		== packetSrcId 
	    	&& flowTableHeaderProtocol[i] 	== packetProtocol)
	    	//if match occurred 
	    	{
	    		hasRuleInTable = true;
				if (flowTableActionType[i] == 0) //forward
				{
					// Count Out packet
	    			packetCountInEachPortInEachTime[flowTableOutPort[i]]++;
	    			
					if (flowTableOutPort[i] == 0) // rules related to host
					{
						host_connected_to_this_switch.hostHandlePacket(	packetSrcId, packetDestId, packetData, packetProtocol, SwitchPort);
					}
					else if (flowTableOutPort[i] == 1) // rules related to neighbor_switches1
					{
    					neighbor_switches[0].swHandlePacket( packetSrcId ,  packetDestId,  packetData,  packetProtocol,  SwitchPort);
					}
					else // rules related to neighbor_switches2
					{
    					neighbor_switches[1].swHandlePacket( packetSrcId ,  packetDestId,  packetData,  packetProtocol,  SwitchPort);
					}
				} 
			}
		}
		if (hasRuleInTable == false) // New packet recieved without match in F.T.(Flow Table)
		{
			controller.newPacketInMessage(	SwId, packetSrcId , packetDestId, packetData, packetProtocol, SwitchPort);
		}
	}
	//This message is sent from the controller to a switch to notify that it must re-try applying an action rule to a buffered packet. 
	msgsrv newPacketOutMessage(	byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol, byte SwitchPort, byte action){
		//This message is sent from the controller to a switch to notify 
		//that it must re-try applying an action rule to a buffered packet. 
		//The message includes the packet header.
		
		//insert new rule to flow table
		boolean ruleIsInserted;
		ruleIsInserted = insertRuleInFT(packetSrcId , packetDestId, SwitchPort, action, packetProtocol);
	    
	    if (ruleIsInserted == true){
	    	self.swHandlePacket(packetSrcId, packetDestId, packetData , packetProtocol, SwitchPort) ;
	    } 

		
	}
	msgsrv modifyState(byte packetSrcId , byte packetDestId, byte port, byte action, byte protocol){
		insertRuleInFT( packetSrcId , packetDestId, port, action, protocol);
	}
	boolean FT_reset()	{
		int i; 
     	for (i = 0; i < 10; i = i + 1) 
     	{
     		flowTableHeaderSrcIP[i]		= 0;
     		flowTableHeaderDestIP[i] 	= 0;
     		flowTableOutPort[i] 		= 0;
     		flowTableActionType[i] 		= 0;
     		flowTableHeaderProtocol[i] 	= 0;
     	}
	}
	boolean insertRuleInFT(byte packetSrcId , byte packetDestId, byte port, byte action, byte protocol)	{
			//action 1 = drop & 0 = forward
			//new action rules to be inserted into the switch\92s flow-table
			//insert new rule to flow table
			boolean ruleIsInserted;
			ruleIsInserted = false;
			int i;
			for (i = 0; i < 10; i = i + 1) {
	    		if (ruleIsInserted == false) {
	    			if (flowTableHeaderDestIP[i] == 0 || (flowTableHeaderSrcIP[i] == packetSrcId && flowTableHeaderDestIP[i] == packetDestId && flowTableHeaderProtocol[i] == protocol)) {
	    				flowTableHeaderDestIP[i] 		= packetDestId;
	    				flowTableHeaderSrcIP[i] 		= packetSrcId;
	    				flowTableOutPort[i] 			= port;
	    				flowTableHeaderProtocol[i] 		= protocol;
	    				flowTableActionType[i] 			= action;
	    				ruleIsInserted = true;
	    			}
	    		}
	    	}
	   		sortFlowTable();
	   		return ruleIsInserted;
	}
}
reactiveclass Host(4) { 
	knownrebecs {
		Switch knownSwitch;
 	}
	statevars { 
		byte 	id; 
		byte 	knownSwitchPort;  
	}
	Host(byte hostId , byte SwitchPortNumber) { 
		id = hostId;
		knownSwitchPort 	= SwitchPortNumber; 
		
		// Represantative packets will be send from h1 & h3 to destination h3
		if (id == 1) { 
			// send from host with ip = 1 to destination host with ip = 5 packetData =1 with protocol = 0
			self.sendInPacket(1, 3, 1, 0) after(1);
			self.sendInPacket(1, 3, 1, 0) after(2); 
		}
		if (id == 2)
		{
			self.sendInPacket(2, 3, 4, 0) after(1);
			self.sendInPacket(2, 3, 4, 0) after(2);
		} 
	} 
	msgsrv sendInPacket(byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol) {
		knownSwitch.swHandlePacket(	packetSrcId, packetDestId, packetData, packetProtocol , knownSwitchPort) ; 
	}
	msgsrv hostHandlePacket(byte packetSrcId , byte packetDestId, byte packetData, byte packetProtocol, byte SwitchPort) {
		
		if (id == 1  ) 
		{
			// packetData is = uniqe combination of source and destination for find policy violations
			if ( packetData == 1  || packetData == 2 )
			{
				illegalAccess = true;
			}
		}
		else if (id == 2 )
		{
			// packetData is = uniqe combination of source and destination for find policy violations
			if ( packetData == 1  || packetData == 2 )
			{
				illegalAccess = true;
			}
		}
		else if (id == 3)
		{
			// packetData is = uniqe combination of source and destination for find policy violations
			if ( packetData == 1  || packetData == 2 )
			{
				illegalAccess = true;
			}
		}
		else if (id == 4)
		{
			// packetData is = uniqe combination of source and destination for find policy violations
			if ( packetData == 1  || packetData == 2 )
			{
				illegalAccess = true;
			}
		}
		else if (id == 5)
		{
			// packetData is = uniqe combination of source and destination for find policy violations
			//packet_counter[packetData-1] = packet_counter[packetData-1] + 1;
			if (packetData == 1 )
			{
				packet_counter[0]=packet_counter[0]+1;
			}
			
			if ( packetData == 2)
			{
				packet_counter[1]= packet_counter[1]+1;
			}

		}		
		if (packetData == 1)// || packetData == 2) //for check all state without deadlock
			self.done() after(4);
	}
	msgsrv done() {
		if ( (packet_counter[0] != 1) && (packet_counter[1] != 1) )
			liveness_error = true;
	
		self.done() after(4);
	}
}
main { 
	
	Controller controller(s1, s2, s3):(); 
   	
   	// Each switch has 3 port ={0,1,2} , 
   	// All hosts connected to port 0 of switches with same id number 
   	// Parameters ordered = id , port0 connected host, 
   	//							port 1 connected neighbor switch1, 
   	//							port 2 connected neighbor switch2   
   	
	Switch s1(controller):(1, h1, s2, s3); 
	Switch s2(controller):(2, h2, s1, s2);
	Switch s3(controller):(3, h3, s1, s2);

 
	Host h1(s1):(1,0); // connect host h1 to switch s1 by id = 1 to port = 0 of switch s1
	Host h2(s2):(2,0); // connect host h2 to switch s1 by id = 2 to port = 0 of switch s2
	Host h3(s3):(3,0); // connect host h3 to switch s1 by id = 3 to port = 0 of switch s3

   
	// Topology: 
	//       ___(Controller)__
	//      /        |        \ 
	//     /2________/\_______1\ 
	//    //         |         \\ 
	//  (S1)_1____1_(S2)_2____1_(S3) 
	//   |           |           | 
	//   0           0           0 
	//   |           |           | 
	//  (h0)        (h1)        (h2)  
} 
